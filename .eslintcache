[{"C:\\dev\\react\\the-zone\\src\\index.tsx":"1","C:\\dev\\react\\the-zone\\src\\components\\NumberDisplay\\NumberDisplay.tsx":"2","C:\\dev\\react\\the-zone\\src\\utils\\index.ts":"3","C:\\dev\\react\\the-zone\\src\\components\\App\\App.tsx":"4","C:\\dev\\react\\the-zone\\src\\components\\Game\\Game.tsx":"5","C:\\dev\\react\\the-zone\\src\\types\\index.ts":"6","C:\\dev\\react\\the-zone\\src\\components\\Button\\Button.tsx":"7","C:\\dev\\react\\the-zone\\src\\constants\\index.ts":"8"},{"size":246,"mtime":1612207376930,"results":"9","hashOfConfig":"10"},{"size":459,"mtime":1612207376925,"results":"11","hashOfConfig":"10"},{"size":4344,"mtime":1612207376933,"results":"12","hashOfConfig":"10"},{"size":1700,"mtime":1612305923105,"results":"13","hashOfConfig":"10"},{"size":6277,"mtime":1612420713462,"results":"14","hashOfConfig":"10"},{"size":1016,"mtime":1612244265042,"results":"15","hashOfConfig":"10"},{"size":1542,"mtime":1612411247741,"results":"16","hashOfConfig":"10"},{"size":85,"mtime":1612207376926,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"13vn1gz",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\dev\\react\\the-zone\\src\\index.tsx",[],["41","42"],"C:\\dev\\react\\the-zone\\src\\components\\NumberDisplay\\NumberDisplay.tsx",[],["43","44"],"C:\\dev\\react\\the-zone\\src\\utils\\index.ts",["45"],"C:\\dev\\react\\the-zone\\src\\components\\App\\App.tsx",["46","47","48","49"],"import React, { useState } from 'react';\r\nimport { GamePhase, GameRecord } from '../../types';\r\nimport Game from '../Game/Game';\r\nimport './App.scss';\r\n\r\nfunction App() {\r\n  const [showInstructions, setShowInstructions] = useState(false);\r\n  const [gameRecord, setGameRecord] = useState(new Array<GameRecord>());\r\n\r\n  const handleXClick = () => {\r\n    setShowInstructions(prev => !prev);\r\n  }\r\n\r\n  const handleGameRecordChange = (gameRecord: GameRecord) => {\r\n    setGameRecord(prev => [gameRecord, ...prev]);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Game updateGameRecord={handleGameRecordChange} />\r\n      {/* <article className=\"Panel\">\r\n        <div className=\"InstructionsContainer\">\r\n        <h2>Instructions</h2>\r\n        <button className=\"ShowInstructionsToggle\" onClick={handleXClick}>{showInstructions ? \"hide\" : \"show\"}</button>\r\n        { showInstructions && \r\n          <ul className=\"instructionsList\">\r\n            <li>Left-click to reveal tile.</li>\r\n            <li>Right-click to flag tile as radioactive.</li>\r\n            <li>Numbers indicate how many radioactive sites are nearby.</li>\r\n            <li>Reveal all non-radioactive tiles to win.</li>\r\n            <li>After winning or losing, reset with the top button.</li>\r\n          </ul>\r\n        }\r\n        </div>\r\n        <div className=\"PersonalHighscoreContainer\">\r\n          <h2 className=\"PersonalHighscoresHeader\">Personal Highscores</h2>\r\n          <ul className=\"gameRecord\">\r\n            {gameRecord.map(record => {\r\n              return <li>{GamePhase[record.status]} {record.time}</li>\r\n            })}\r\n          </ul>\r\n        </div>\r\n      </article> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;",["50","51"],"C:\\dev\\react\\the-zone\\src\\components\\Game\\Game.tsx",["52","53"],"import React, {useEffect, useState, useReducer} from 'react';\r\nimport {Cell, CellValue, CellState, Action, ActionType, GamePhase, GameRecord} from \"../../types\"\r\n\r\nimport Button from '../Button/Button';\r\nimport NumberDisplay from '../NumberDisplay/NumberDisplay';\r\nimport { generateCells, bfsDiscover, getGamePhaseFromCells } from '../../utils';\r\n\r\nimport './Game.scss';\r\nimport { BOMB_COUNT } from '../../constants';\r\n\r\nfunction reducer(state: {cells: Cell[][], gamePhase: GamePhase}, action: Action): {cells: Cell[][], gamePhase: GamePhase} {\r\n  const newCellState = action.type === ActionType.DISCOVER ? CellState.discovered :\r\n                   action.type === ActionType.FLAG ? CellState.flagged :\r\n                   action.type === ActionType.UNFLAG ? CellState.undiscovered : CellState.undiscovered;\r\n\r\n  let newState = {\r\n    cells: state.cells,\r\n    gamePhase: state.gamePhase\r\n  };\r\n\r\n  switch(action.type){\r\n    case ActionType.STATUS_CLICK:\r\n      return {\r\n        cells: (state.gamePhase === GamePhase.playing) ? state.cells : generateCells(),\r\n        gamePhase: (state.gamePhase === GamePhase.won || state.gamePhase === GamePhase.lost) ? GamePhase.apriori : GamePhase.playing\r\n      }\r\n    case ActionType.INIT:\r\n      return {\r\n        cells: generateCells(),\r\n        gamePhase: GamePhase.apriori\r\n      };\r\n    case ActionType.FIRST_CLICK:\r\n      newState.cells = generateCells(action.i2D);\r\n      break;\r\n    case ActionType.BFS_REVEAL:\r\n      newState.cells = bfsDiscover(state.cells, action.i2D);\r\n      break;\r\n    case ActionType.DISCOVER:\r\n    case ActionType.FLAG:\r\n    case ActionType.UNFLAG:\r\n      newState.cells = state.cells.map((row, rowIndex) => {\r\n        return row.map((currCell, colIndex) => {\r\n          return (action.i2D[0] === rowIndex && action.i2D[1] === colIndex) ? {...currCell, state: newCellState} : currCell;\r\n        })\r\n      })\r\n      break;\r\n  }\r\n\r\n  newState.gamePhase = getGamePhaseFromCells(newState.cells);\r\n\r\n  return newState;\r\n}\r\n\r\ninterface GameProps {\r\n  updateGameRecord: (gameRecord: GameRecord) => void;\r\n}\r\n\r\nfunction Game({updateGameRecord}: GameProps) {\r\n  const [state, cellDispatch] = useReducer(reducer, {cells: generateCells(), gamePhase: GamePhase.apriori});\r\n  const [time , setTime ] = useState<number>  (0);\r\n\r\n  useEffect(() => {\r\n    if (state.gamePhase === GamePhase.playing) {\r\n      const interval = setInterval(() => {\r\n        setTime(Math.min(time + 1, 999));\r\n      }, 1000);\r\n      return () => clearInterval(interval);\r\n    } else if (state.gamePhase === GamePhase.apriori) {\r\n      setTime(0);\r\n    }\r\n  }, [state.gamePhase, time])\r\n\r\n  useEffect(() => {\r\n    if(state.gamePhase === GamePhase.won || state.gamePhase === GamePhase.lost){\r\n      updateGameRecord({status: state.gamePhase, time});\r\n      if(state.gamePhase === GamePhase.lost){\r\n        state.cells.map((row, rowIndex) => {\r\n          row.forEach((cell, colIndex) => {\r\n            if(cell.value==CellValue.bomb)\r\n              cellDispatch({type: ActionType.DISCOVER, i2D: [rowIndex, colIndex]})\r\n          });\r\n        })\r\n      }\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [state.gamePhase])\r\n\r\n  const handleCellClick = (rowParam: number, colParam: number) => (): void => {\r\n    if(state.gamePhase !== GamePhase.playing) {\r\n      cellDispatch({type: ActionType.FIRST_CLICK, i2D: [rowParam, colParam]});\r\n    } else {\r\n      const cell = state.cells[rowParam][colParam];\r\n\r\n      switch(cell.state){\r\n        case CellState.flagged:\r\n          return;\r\n        case CellState.discovered:\r\n          return;\r\n        case CellState.undiscovered:\r\n          if(cell.value === CellValue.none)\r\n            cellDispatch({type: ActionType.BFS_REVEAL, i2D: [rowParam, colParam]})\r\n          else {\r\n            cellDispatch({type: ActionType.DISCOVER, i2D: [rowParam, colParam]})\r\n          }\r\n          return;\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleCellContext = (rowParam: number, colParam: number) => (e: React.MouseEvent<HTMLDivElement, MouseEvent>): void => {\r\n    e.preventDefault();\r\n    if(state.gamePhase !== GamePhase.playing) return;\r\n    const currentCell = state.cells[rowParam][colParam];\r\n\r\n    switch(currentCell.state){\r\n      case CellState.discovered:\r\n        return;\r\n      case CellState.undiscovered:\r\n        cellDispatch({type: ActionType.FLAG, i2D: [rowParam, colParam]})\r\n        break;\r\n      case CellState.flagged:\r\n        cellDispatch({type: ActionType.UNFLAG, i2D: [rowParam, colParam]})\r\n        break;\r\n    }\r\n    return;\r\n  }\r\n\r\n  const handleStatusClick = () : void => {\r\n    cellDispatch({type: ActionType.STATUS_CLICK});\r\n  }\r\n\r\n  const bombCount = () => {\r\n    return BOMB_COUNT - state.cells.reduce((acc, curr) => {\r\n      return acc + curr.reduce((acc, curr) => {\r\n        return acc + ((curr.state === CellState.flagged) ? 1 : 0);\r\n      }, 0)\r\n    }, 0)\r\n  }\r\n\r\n  const renderCells = (): React.ReactNode => {\r\n    return state.cells.map((row, rowIndex) => {\r\n      return row.map((cell, colIndex) => {\r\n        return <Button\r\n          key={`${rowIndex}-${colIndex}`}\r\n          value={cell.value}\r\n          state ={cell.state}\r\n          row={rowIndex}\r\n          col={colIndex}\r\n          onClickHandler={handleCellClick}\r\n          onContextMenuHandler={handleCellContext}\r\n        />\r\n      })\r\n    })\r\n  }\r\n\r\n  const message = () => {\r\n    switch(state.gamePhase){\r\n      case GamePhase.apriori:\r\n        return \"click any cell to begin\"\r\n      case GamePhase.playing:\r\n        return \"be careful\"\r\n      case GamePhase.lost:\r\n        return \"a terrible mistake...\"\r\n      case GamePhase.won:\r\n        return \"disaster averted, for now\"\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"Game\">\r\n      <header className=\"Header\">\r\n        <NumberDisplay displayNumber={bombCount()} />\r\n        <button className={`GamePhaseButton ${GamePhase[state.gamePhase]}`}\r\n          onClick={handleStatusClick}></button>\r\n        <NumberDisplay displayNumber={time} />\r\n      </header>\r\n      <section className=\"Body\">\r\n        {renderCells()}\r\n      </section>\r\n      <div className=\"MessageContainer\">\r\n        <span></span>\r\n        <p className=\"Message\">{message()}</p>\r\n        <span></span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Game;\r\n",["54","55"],"C:\\dev\\react\\the-zone\\src\\types\\index.ts",[],["56","57"],"C:\\dev\\react\\the-zone\\src\\components\\Button\\Button.tsx",[],"C:\\dev\\react\\the-zone\\src\\constants\\index.ts",[],{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"58","replacedBy":"62"},{"ruleId":"60","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":1,"column":10,"nodeType":"66","messageId":"67","endLine":1,"endColumn":22},{"ruleId":"64","severity":1,"message":"68","line":2,"column":10,"nodeType":"66","messageId":"67","endLine":2,"endColumn":19},{"ruleId":"64","severity":1,"message":"69","line":7,"column":10,"nodeType":"66","messageId":"67","endLine":7,"endColumn":26},{"ruleId":"64","severity":1,"message":"70","line":8,"column":10,"nodeType":"66","messageId":"67","endLine":8,"endColumn":20},{"ruleId":"64","severity":1,"message":"71","line":10,"column":9,"nodeType":"66","messageId":"67","endLine":10,"endColumn":21},{"ruleId":"58","replacedBy":"72"},{"ruleId":"60","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":77,"column":41,"nodeType":"76","messageId":"77","endLine":77,"endColumn":43},{"ruleId":"78","severity":1,"message":"79","line":79,"column":26,"nodeType":"80","messageId":"81","endLine":79,"endColumn":28},{"ruleId":"58","replacedBy":"82"},{"ruleId":"60","replacedBy":"83"},{"ruleId":"58","replacedBy":"84"},{"ruleId":"60","replacedBy":"85"},"no-native-reassign",["86"],"no-negated-in-lhs",["87"],["86"],["87"],"@typescript-eslint/no-unused-vars","'elementRoles' is defined but never used.","Identifier","unusedVar","'GamePhase' is defined but never used.","'showInstructions' is assigned a value but never used.","'gameRecord' is assigned a value but never used.","'handleXClick' is assigned a value but never used.",["86"],["87"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["86"],["87"],["86"],["87"],"no-global-assign","no-unsafe-negation"]